#!/sbin/sh
export UPD_ZIP="$3"
export UPD_INTERFACE="/proc/$$/fd/$2"
export RECOVERY_SCRIPT_FD=$2
export UPD_TEMP_FOLDER=/tmp
export ZIP_TEMP_FOLDER=/zip_tmp

set -o pipefail


# same as progress command in updater-script, for example:
#
# progress 0.25 10
#
# will update the next 25% of the progress bar over a period of 10 seconds

progress() {
	if [ $# != 2 ] 
	then echo "$0 expects 2 args, got $#"; 
		 echo "usage: $0 <fraction> <duration>";
	else 
		if [ $UPD_INTERFACE != "" ]; then
		echo "progress ${1} ${2} " 1>&$UPD_INTERFACE;
		fi;
	fi
}

show_progress() {
	progress $@
}

# same as set_progress command in updater-script, for example:
#
# set_progress 0.25
#
# sets progress bar to 25%

set_progress() {
	if [ $# != 1 ] 
	then echo "$0 expects 1 args, got $#"; 
		 echo "usage: $0 <fraction>";
	else 
		if [ $UPD_INTERFACE != "" ]; then
		echo "set_progress ${1} " 1>&$UPD_INTERFACE;
		fi;
	fi
}

# same as ui_print command in updater_script, for example:
#
# ui_print "hello world!"
#
# will output "hello world!" to recovery, while
#
# ui_print
#
# outputs an empty line

ui_print() {
  if [ $UPD_INTERFACE != "" ]; then
    echo "ui_print $* " 1>&$UPD_INTERFACE;
    echo "ui_print " 1>&$UPD_INTERFACE;
  else
    echo "$*";
  fi;
}


# FIXES AND FEATURES ADDED BY ArKT , telegram - ArKT_7, Github - https://github.com/ArKT-7
# UI_PRINT FIX, 
# ADDED - PROGRESS_BAR, PROGRESS_PERCENTANGE WHILE CP, 
#

OUTFD=/proc/self/fd/$2;

ui_print() {
  until [ ! "$1" ]; do
    echo "ui_print $1
      ui_print" >> $OUTFD;
    shift;
  done;
}

show_progress() { echo "progress $1 $2" >> $OUTFD; }

copy_with_progress() {
    local src_file=$1
    local dest_file=$2
    local total_size=$(stat -c%s "$src_file")
    local copied_size=0
    local percentage=0
    cp "$src_file" "$dest_file" &
    local cp_pid=$!
    while kill -0 "$cp_pid" 2>/dev/null; do
        copied_size=$(stat -c%s "$dest_file" 2>/dev/null || echo 0)
        percentage=$(echo "scale=2; ($copied_size / $total_size) * 100" | bc)
        local progress_message="$(basename "$src_file") - $percentage%"
        ui_print "$progress_message"
        sleep 1
    done
    ui_print "$(basename "$src_file") - 100%."
}

abort() {
  ui_print "$@";
  ui_print "*                      ***                      *";
  exit 1;
}
#till here its by ArKt

part_win="/dev/block/by-name/win"
part_esp="/dev/block/by-name/esp"
part_userdata="/dev/block/by-name/userdata"

# Function to round values
round() {
    echo $(awk "BEGIN {print int($1 + 0.5)}")
}

# Check if partitions exist
if [ -e $part_win ] && [ -e $part_esp ]; then
    # Get partition sizes in bytes
    WIN_SIZE_BYTES=$(blockdev --getsize64 $part_win)
    ESP_SIZE_BYTES=$(blockdev --getsize64 $part_esp)
    USERDATA_SIZE_BYTES=$(blockdev --getsize64 $part_userdata)
	
    # Convert bytes to GB and MB using integer division and rounding
    WIN_SIZE=$(awk "BEGIN {print $WIN_SIZE_BYTES / (1000 * 1000 * 1000)}")
    ESP_SIZE=$(awk "BEGIN {print $ESP_SIZE_BYTES / (1000 * 1000)}")
    USERDATA_SIZE=$(awk "BEGIN {print $USERDATA_SIZE_BYTES / (1000 * 1000 * 1000)}")

    # Round the values
    WIN_SIZE_ROUNDED=$(round $WIN_SIZE)
    ESP_SIZE_ROUNDED=$(round $ESP_SIZE)
    USERDATA_SIZE_ROUNDED=$(round $USERDATA_SIZE)

    # Check partition size requirements
    if (( WIN_SIZE_ROUNDED >= 30 && ESP_SIZE_ROUNDED >= 349 )); then
        ui_print "USERDATA_SIZE: ${USERDATA_SIZE_ROUNDED}GB"
        ui_print "WIN_SIZE: ${WIN_SIZE_ROUNDED}GB"
        ui_print "ESP_SIZE: ${ESP_SIZE_ROUNDED}MB"
    else
		ui_print "USERDATA_SIZE: ${USERDATA_SIZE_ROUNDED}GB"
        ui_print "WIN_SIZE: ${WIN_SIZE_ROUNDED}GB"
        ui_print "ESP_SIZE: ${ESP_SIZE_ROUNDED}MB"
        ui_print "At least 30GB for win and 350MB for esp partition required."
        exit 1
    fi
else
    ui_print "Required partitions do not exist."
    exit 1
fi

WIN_IMAGE=""

# Function to search for image recursively
search_image() {
    local search_dir="$1"
    # ui_print "Searching in $search_dir..."
    WIN_IMAGE=$(find "$search_dir" -type f \( -name "*.esd" -o -name "*.wim" \) ! -path "*/Android/*" | head -n 1)
    if [ -n "$WIN_IMAGE" ]; then
        ui_print "Windows Image found at $WIN_IMAGE"
    fi
}

# Search in default directories first
search_image "/sdcard/Download"
search_image "/external_sd/WOA"
search_image "/usbstorage/WOA"
search_image "/usb_otg/WOA"

# If no image found, search recursively in all directories, skipping "Android" becuse lol
if [ -z "$WIN_IMAGE" ]; then
    for dir in /sdcard /external_sd /usbstorage /usb_otg; do
        if [ -d "$dir" ]; then
            search_image "$dir"
            [ -n "$WIN_IMAGE" ] && break
        fi
    done
fi

# If still no image found, check mounted Windows partition
if [ -z "$WIN_IMAGE" ]; then
    mkdir -p /tmp/win
    ui_print "Mounting Windows partition..."
    umount "$part_win" 2>/dev/null
    mount.ntfs "$part_win" /tmp/win || { ui_print "Failed to mount $part_win"; exit 1; }
    
    if [ -f /tmp/win/Windows/explorer.exe ]; then
        ui_print "Windows is already installed. Processing for drivers update."
        umount /tmp/win
    else
        ui_print "No ESD or WIM files found anywhere. Ensure the file exists on your devices."
        umount /tmp/win
        exit 1
    fi
fi

# Editions to search and set windows edition for in priority order
WINDOWS_EDITIONS=(
    "Windows 11 Pro"
    "Windows 11 IoT Enterprise LTSC"
    "Windows 10 Pro"
    "Windows 11 Home"
)


package_extract_file(){
	if [ $# != 2 ] 
	then echo "$0 expects 2 args, got $#"; 
		 echo "usage: $0 <src-file> <dst-file>";
	else unzip -p $UPD_ZIP $1 > $2;
	fi
}

package_extract_folder(){
	if [ -d $ZIP_TEMP_FOLDER ] 
	then rm -rf $ZIP_TEMP_FOLDER
	fi
	
	if [ $# != 2 ] 
	then echo "$0 expects 2 args, got $#"; echo "usage: $0 <src-dir> <dst-dir>";
	else mkdir -p ZIP_TEMP_FOLDER
		 unzip $UPD_ZIP $1/* -d $ZIP_TEMP_FOLDER;
		 mv $ZIP_TEMP_FOLDER/$1 $2
	fi	
}

set_perm() {
	if [ $# != 2 ] 
	then echo "$0 expects 4 args, got $#"; 
		 echo "usage: $0 <uid> <gid> <mode> <pathtofile>[, ... pathtofileN]";
	else
		us=$(id -u $1)
		gr=$(id -g $2)
		mode=$3
		shift 3
		for item in "$*"; do
			chown ${us}.${gr} $item
			chown ${us}:${gr} $item
			chmod $mode $item
		done
	fi
}

stdout_to_ui_print() {
	while read -r line; do
	ui_print "$line"
	done
}

to_ui_print() {
	eval "$*" | stdout_to_ui_print
}

# empty line after "Extracting ..." from updater-script
ui_print;
if [ "$UPD_ZIP" == "/tmp/update.zip" ]; then
	ui_print "Can not run in sideload mode"
	abort;
fi

if [ -d $UPD_TEMP_FOLDER ]
then rm -rf $UPD_TEMP_FOLDER
fi
mkdir -p $UPD_TEMP_FOLDER
package_extract_file META-INF/com/google/android/updater-script $UPD_TEMP_FOLDER/updater-script || ui_print "Can not extract updater-script. Do you have it in package?"
chmod 777 $UPD_TEMP_FOLDER/updater-script
. $UPD_TEMP_FOLDER/updater-script $@
exit $?
